[4mPYTHON[24m(1)                                                          General Commands Manual                                                         [4mPYTHON[24m(1)

[1mNAME[0m
       python - an interpreted, interactive, object-oriented programming language

[1mSYNOPSIS[0m
       [1mpython [22m[ [1m-B [22m] [ [1m-b [22m] [ [1m-d [22m] [ [1m-E [22m] [ [1m-h [22m] [ [1m-i [22m] [ [1m-I [22m]
              [ [1m-m [4m[22mmodule-name[24m ] [ [1m-q [22m] [ [1m-O [22m] [ [1m-OO [22m] [ [1m-P [22m] [ [1m-s [22m] [ [1m-S [22m] [ [1m-u [22m]
              [ [1m-v [22m] [ [1m-V [22m] [ [1m-W [4m[22margument[24m ] [ [1m-x [22m] [ [1m-X [4m[22moption[24m ] [ [1m-?  [22m]
              [ [1m--check-hash-based-pycs [4m[22mdefault[24m | [4malways[24m | [4mnever[24m ]
              [ [1m--help [22m] [ [1m--help-env [22m] [ [1m--help-xoptions [22m] [ [1m--help-all [22m]
              [ [1m-c [4m[22mcommand[24m | [4mscript[24m | - ] [ [4marguments[24m ]

[1mDESCRIPTION[0m
       Python  is an interpreted, interactive, object-oriented programming language that combines remarkable power with very clear syntax.  For an introduc‚Äê
       tion to programming in Python, see the Python Tutorial.  The Python Library Reference documents built-in and standard types, constants, functions and
       modules.  Finally, the Python Reference Manual describes the syntax and semantics of the core language in (perhaps too) much  detail.   (These  docu‚Äê
       ments may be located via the [1mINTERNET RESOURCES [22mbelow; they may be installed on your system as well.)

       Python's  basic  power can be extended with your own modules written in C or C++.  On most systems such modules may be dynamically loaded.  Python is
       also adaptable as an extension language for existing applications.  See the internal documentation for hints.

       Documentation for installed Python modules and packages can be viewed by running the [1mpydoc [22mprogram.

[1mCOMMAND LINE OPTIONS[0m
       [1m-B     [22mDon't write [4m.pyc[24m files on import. See also PYTHONDONTWRITEBYTECODE.

       [1m-b     [22mIssue warnings about str(bytes_instance), str(bytearray_instance) and comparing bytes/bytearray with str. (-bb: issue errors)

       [1m-c [4m[22mcommand[0m
              Specify the command to execute (see next section).  This terminates the option list (following options are passed as  arguments  to  the  com‚Äê
              mand).

       [1m--check-hash-based-pycs [4m[22mmode[0m
              Configure how Python evaluates the up-to-dateness of hash-based .pyc files.

       [1m-d     [22mTurn on parser debugging output (for expert only, depending on compilation options).

       [1m-E     [22mIgnore environment variables like PYTHONPATH and PYTHONHOME that modify the behavior of the interpreter.

       [1m-h ,  -? ,  --help[0m
              Prints the usage for the interpreter executable and exits.

       [1m--help-env[0m
              Prints help about Python-specific environment variables and exits.

       [1m--help-xoptions[0m
              Prints help about implementation-specific [1m-X [22moptions and exits.

       [1m--help-all[0m
              Prints complete usage information and exits.

       [1m-i     [22mWhen a script is passed as first argument or the [1m-c [22moption is used, enter interactive mode after executing the script or the command.  It does
              not read the $PYTHONSTARTUP file.  This can be useful to inspect global variables or a stack trace when a script raises an exception.

       [1m-I     [22mRun Python in isolated mode. This also implies [1m-E[22m, [1m-P [22mand [1m-s[22m. In isolated mode sys.path contains neither the script's directory nor the user's
              site-packages directory. All PYTHON* environment variables are ignored, too.  Further restrictions may be imposed to prevent the user from in‚Äê
              jecting malicious code.

       [1m-m [4m[22mmodule-name[0m
              Searches [4msys.path[24m for the named module and runs the corresponding [4m.py[24m file as a script. This terminates the option list (following options are
              passed as arguments to the module).

       [1m-O     [22mRemove  assert  statements  and  any  code conditional on the value of __debug__; augment the filename for compiled (bytecode) files by adding
              .opt-1 before the .pyc extension.

       [1m-OO    [22mDo [1m-O [22mand also discard docstrings; change the filename for compiled (bytecode) files by adding .opt-2 before the .pyc extension.

       [1m-P     [22mDon't automatically prepend a potentially unsafe path to [1msys.path [22msuch as the current directory, the script's directory or  an  empty  string.
              See also the [1mPYTHONSAFEPATH [22menvironment variable.

       [1m-q     [22mDo not print the version and copyright messages. These messages are also suppressed in non-interactive mode.

       [1m-s     [22mDon't add user site directory to sys.path.

       [1m-S     [22mDisable  the  import of the module [4msite[24m and the site-dependent manipulations of [4msys.path[24m that it entails.  Also disable these manipulations if
              [4msite[24m is explicitly imported later.

       [1m-u     [22mForce the stdout and stderr streams to be unbuffered.  This option has no effect on the stdin stream.

       [1m-v     [22mPrint a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded.  When given twice,
              print a message for each file that is checked for when searching for a module.  Also provides information on module cleanup at exit.

       [1m-V ,  --version[0m
              Prints the Python version number of the executable and exits.  When given twice, print more information about the build.

       [1m-W [4m[22margument[0m
              Warning control. Python's warning machinery by default prints warning messages to [4msys.stderr[24m.

              The simplest settings apply a particular action unconditionally to all warnings emitted by a process (even those that are otherwise ignored by
              default):

                -Wdefault  # Warn once per call location
                -Werror    # Convert to exceptions
                -Walways   # Warn every time
                -Wmodule   # Warn once per calling module
                -Wonce     # Warn once per Python process
                -Wignore   # Never warn

              The action names can be abbreviated as desired and the interpreter will resolve them to the appropriate action name. For example, [1m-Wi  [22mis  the
              same as [1m-Wignore .[0m

              The full form of argument is: [4maction:message:category:module:lineno[0m

              Empty  fields match all values; trailing empty fields may be omitted. For example [1m-W ignore::DeprecationWarning [22mignores all DeprecationWarning
              warnings.

              The [4maction[24m field is as explained above but only applies to warnings that match the remaining fields.

              The [4mmessage[24m field must match the whole printed warning message; this match is case-insensitive.

              The [4mcategory[24m field matches the warning category (ex: "DeprecationWarning"). This must be a class name; the match test whether the actual warn‚Äê
              ing category of the message is a subclass of the specified warning category.

              The [4mmodule[24m field matches the (fully-qualified) module name; this match is case-sensitive.

              The [4mlineno[24m field matches the line number, where zero matches all line numbers and is thus equivalent to an omitted line number.

              Multiple [1m-W [22moptions can be given; when a warning matches more than one option, the action for the last matching option is  performed.  Invalid
              [1m-W [22moptions are ignored (though, a warning message is printed about invalid options when the first warning is issued).

              Warnings can also be controlled using the [1mPYTHONWARNINGS [22menvironment variable and from within a Python program using the warnings module.  For
              example, the warnings.filterwarnings() function can be used to use a regular expression on the warning message.

       [1m-X [4m[22moption[0m
              Set implementation-specific option. The following options are available:

                  -X faulthandler: enable faulthandler

                  -X showrefcount: output the total reference count and number of used
                      memory blocks when the program finishes or after each statement in the
                      interactive interpreter. This only works on debug builds

                  -X tracemalloc: start tracing Python memory allocations using the
                      tracemalloc module. By default, only the most recent frame is stored in a
                      traceback of a trace. Use -X tracemalloc=NFRAME to start tracing with a
                      traceback limit of NFRAME frames

                  -X importtime: show how long each import takes. It shows module name,
                      cumulative time (including nested imports) and self time (excluding
                      nested imports). Note that its output may be broken in multi-threaded
                      application. Typical usage is python3 -X importtime -c 'import asyncio'

                  -X dev: enable CPython's "development mode", introducing additional runtime
                      checks which are too expensive to be enabled by default. It will not be
                      more verbose than the default if the code is correct: new warnings are
                      only emitted when an issue is detected. Effect of the developer mode:
                         * Add default warning filter, as -W default
                         * Install debug hooks on memory allocators: see the PyMem_SetupDebugHooks()
                           C function
                         * Enable the faulthandler module to dump the Python traceback on a crash
                         * Enable asyncio debug mode
                         * Set the dev_mode attribute of sys.flags to True
                         * io.IOBase destructor logs close() exceptions

                  -X utf8: enable UTF-8 mode for operating system interfaces, overriding the default
                      locale-aware mode. -X utf8=0 explicitly disables UTF-8 mode (even when it would
                      otherwise activate automatically). See PYTHONUTF8 for more details

                  -X pycache_prefix=PATH: enable writing .pyc files to a parallel tree rooted at the
                      given directory instead of to the code tree.

                  -X warn_default_encoding: enable opt-in EncodingWarning for 'encoding=None'

                  -X no_debug_ranges: disable the inclusion of the tables mapping extra location
                     information (end line, start column offset and end column offset) to every
                     instruction in code objects. This is useful when smaller code objects and pyc
                     files are desired as well as suppressing the extra visual location indicators
                     when the interpreter displays tracebacks.

                  -X frozen_modules=[on|off]: whether or not frozen modules should be used.
                     The default is "on" (or "off" if you are running a local build).

                  -X int_max_str_digits=number: limit the size of int<->str conversions.
                     This helps avoid denial of service attacks when parsing untrusted data.
                     The default is sys.int_info.default_max_str_digits.  0 disables.

       [1m-x     [22mSkip the first line of the source.  This is intended for a DOS specific hack only.  Warning: the line numbers in error messages will be off by
              one!

[1mINTERPRETER INTERFACE[0m
       The  interpreter  interface  resembles that of the UNIX shell: when called with standard input connected to a tty device, it prompts for commands and
       executes them until an EOF is read; when called with a file name argument or with a file as standard input, it reads and executes a [4mscript[24m from  that
       file;  when  called with [1m-c [4m[22mcommand[24m, it executes the Python statement(s) given as [4mcommand[24m.  Here [4mcommand[24m may contain multiple statements separated by
       newlines.  Leading whitespace is significant in Python statements!  In non-interactive mode, the entire input is parsed before it is executed.

       If available, the script name and additional arguments thereafter are passed to the script in the Python  variable  [4msys.argv[24m,  which  is  a  list  of
       strings  (you must first [4mimport[24m [4msys[24m to be able to access it).  If no script name is given, [4msys.argv[0][24m is an empty string; if [1m-c [22mis used, [4msys.argv[0][0m
       contains the string [4m'-c'.[24m  Note that options interpreted by the Python interpreter itself are not placed in [4msys.argv[24m.

       In interactive mode, the primary prompt is `>>>'; the second prompt (which appears when a command is not complete) is  `...'.   The  prompts  can  be
       changed  by  assignment  to [4msys.ps1[24m or [4msys.ps2[24m.  The interpreter quits when it reads an EOF at a prompt.  When an unhandled exception occurs, a stack
       trace is printed and control returns to the primary prompt; in non-interactive mode, the interpreter exits after printing the stack trace.   The  in‚Äê
       terrupt  signal  raises the [4mKeyboardInterrupt[24m exception; other UNIX signals are not caught (except that SIGPIPE is sometimes ignored, in favor of the
       [4mIOError[24m exception).  Error messages are written to stderr.

[1mFILES AND DIRECTORIES[0m
       These are subject to difference depending on local installation conventions; ${prefix} and ${exec_prefix} are installation-dependent  and  should  be
       interpreted as for GNU software; they may be the same.  On Debian GNU/{Hurd,Linux} the default for both is [4m/usr[24m.

       [4m${exec_prefix}/bin/python[0m
              Recommended location of the interpreter.

       [4m${prefix}/lib/python<version>[0m
       [4m${exec_prefix}/lib/python<version>[0m
              Recommended locations of the directories containing the standard modules.

       [4m${prefix}/include/python<version>[0m
       [4m${exec_prefix}/include/python<version>[0m
              Recommended locations of the directories containing the include files needed for developing Python extensions and embedding the interpreter.

[1mENVIRONMENT VARIABLES[0m
       PYTHONSAFEPATH
              If  this  is  set  to a non-empty string, don't automatically prepend a potentially unsafe path to [1msys.path [22msuch as the current directory, the
              script's directory or an empty string. See also the [1m-P [22moption.

       PYTHONHOME
              Change the location of the standard Python libraries.  By default, the libraries are searched in ${prefix}/lib/python<version> and ${exec_pre‚Äê
              fix}/lib/python<version>, where ${prefix} and ${exec_prefix} are installation-dependent directories,  both  defaulting  to  [4m/usr/local[24m.   When
              $PYTHONHOME  is  set  to a single directory, its value replaces both ${prefix} and ${exec_prefix}.  To specify different values for these, set
              $PYTHONHOME to ${prefix}:${exec_prefix}.

       PYTHONPATH
              Augments the default search path for module files.  The format is the same as the shell's $PATH: one or more directory pathnames separated  by
              colons.   Non-existent  directories are silently ignored.  The default search path is installation dependent, but generally begins with ${pre‚Äê
              fix}/lib/python<version> (see PYTHONHOME above).  The default search path is always appended to $PYTHONPATH.  If a script argument  is  given,
              the  directory containing the script is inserted in the path in front of $PYTHONPATH.  The search path can be manipulated from within a Python
              program as the variable [4msys.path[24m.

       PYTHONPLATLIBDIR
              Override sys.platlibdir.

       PYTHONSTARTUP
              If this is the name of a readable file, the Python commands in that file are executed before the first  prompt  is  displayed  in  interactive
              mode.   The  file  is executed in the same name space where interactive commands are executed so that objects defined or imported in it can be
              used without qualification in the interactive session.  You can also change the prompts [4msys.ps1[24m and [4msys.ps2[24m in this file.

       PYTHONOPTIMIZE
              If this is set to a non-empty string it is equivalent to specifying the [1m-O [22moption. If set to an integer, it is  equivalent  to  specifying  [1m-O[0m
              multiple times.

       PYTHONDEBUG
              If  this  is  set  to a non-empty string it is equivalent to specifying the [1m-d [22moption. If set to an integer, it is equivalent to specifying [1m-d[0m
              multiple times.

       PYTHONDONTWRITEBYTECODE
              If this is set to a non-empty string it is equivalent to specifying the [1m-B [22moption (don't try to write [4m.pyc[24m files).

       PYTHONINSPECT
              If this is set to a non-empty string it is equivalent to specifying the [1m-i [22moption.

       PYTHONIOENCODING
              If this is set before running the interpreter, it overrides the encoding used for stdin/stdout/stderr, in the syntax [4mencodingname[24m[1m:[4m[22merrorhandler[0m
              The [4merrorhandler[24m part is optional and has the same meaning as in str.encode. For stderr, the [4merrorhandler[0m
               part is ignored; the handler will always be ¬¥backslashreplace¬¥.

       PYTHONNOUSERSITE
              If this is set to a non-empty string it is equivalent to specifying the [1m-s [22moption (Don't add the user site directory to sys.path).

       PYTHONUNBUFFERED
              If this is set to a non-empty string it is equivalent to specifying the [1m-u [22moption.

       PYTHONVERBOSE
              If this is set to a non-empty string it is equivalent to specifying the [1m-v [22moption. If set to an integer, it is  equivalent  to  specifying  [1m-v[0m
              multiple times.

       PYTHONWARNINGS
              If this is set to a comma-separated string it is equivalent to specifying the [1m-W [22moption for each separate value.

       PYTHONHASHSEED
              If this variable is set to "random", a random value is used to seed the hashes of str and bytes objects.

              If PYTHONHASHSEED is set to an integer value, it is used as a fixed seed for generating the hash() of the types covered by the hash randomiza‚Äê
              tion.  Its purpose is to allow repeatable hashing, such as for selftests for the interpreter itself, or to allow a cluster of python processes
              to share hash values.

              The integer must be a decimal number in the range [0,4294967295].  Specifying the value 0 will disable hash randomization.

       PYTHONINTMAXSTRDIGITS
              Limit  the maximum digit characters in an int value when converting from a string and when converting an int back to a str.  A value of 0 dis‚Äê
              ables the limit.  Conversions to or from bases 2, 4, 8, 16, and 32 are never limited.

       PYTHONMALLOC
              Set the Python memory allocators and/or install debug hooks. The available memory allocators are [4mmalloc[24m and  [4mpymalloc[24m.   The  available  debug
              hooks are [4mdebug[24m, [4mmalloc_debug[24m, and [4mpymalloc_debug[24m.

              When Python is compiled in debug mode, the default is [4mpymalloc_debug[24m and the debug hooks are automatically used. Otherwise, the default is [4mpy‚Äê[0m
              [4mmalloc[24m.

       PYTHONMALLOCSTATS
              If set to a non-empty string, Python will print statistics of the pymalloc memory allocator every time a new pymalloc object arena is created,
              and on shutdown.

              This  variable is ignored if the $[1mPYTHONMALLOC [22menvironment variable is used to force the [1mmalloc[22m(3) allocator of the C library, or if Python is
              configured without pymalloc support.

       PYTHONASYNCIODEBUG
              If this environment variable is set to a non-empty string, enable the debug mode of the asyncio module.

       PYTHONTRACEMALLOC
              If this environment variable is set to a non-empty string, start tracing Python memory allocations using the tracemalloc module.

              The value of the variable is the maximum number of frames stored in a traceback of a trace. For example, [4mPYTHONTRACEMALLOC=1[24m stores  only  the
              most recent frame.

       PYTHONFAULTHANDLER
              If  this environment variable is set to a non-empty string, [4mfaulthandler.enable()[24m is called at startup: install a handler for SIGSEGV, SIGFPE,
              SIGABRT, SIGBUS and SIGILL signals to dump the Python traceback.

              This is equivalent to the [1m-X faulthandler [22moption.

       PYTHONEXECUTABLE
              If this environment variable is set, [4msys.argv[0][24m will be set to its value instead of the value got through the C runtime. Only works on Mac OS
              X.

       PYTHONUSERBASE
              Defines the user base directory, which is used to compute the path of the user [4msite-packages[24m directory and installation paths  for  [4mpython[24m  [4m-m[0m
              [4mpip[24m [4minstall[24m [4m--user[24m.

       PYTHONPROFILEIMPORTTIME
              If  this environment variable is set to a non-empty string, Python will show how long each import takes. This is exactly equivalent to setting
              [1m-X importtime [22mon the command line.

       PYTHONBREAKPOINT
              If this environment variable is set to 0, it disables the default debugger. It can be set to the callable of your debugger of choice.

   [1mDebug-mode variables[0m
       Setting these variables only has an effect in a debug build of Python, that is, if Python was configured with the [1m--with-pydebug [22mbuild option.

       PYTHONDUMPREFS
              If this environment variable is set, Python will dump objects and reference counts still alive after shutting down the interpreter.

[1mAUTHOR[0m
       The Python Software Foundation: https://www.python.org/psf/

[1mINTERNET RESOURCES[0m
       Main website:  https://www.python.org/
       Documentation:  https://docs.python.org/
       Developer resources:  https://devguide.python.org/
       Downloads:  https://www.python.org/downloads/
       Module repository:  https://pypi.org/
       Newsgroups:  comp.lang.python, comp.lang.python.announce

[1mLICENSING[0m
       Python is distributed under an Open Source license.  See the file "LICENSE" in the Python source distribution for information on terms  &  conditions
       for accessing and otherwise using Python and for a DISCLAIMER OF ALL WARRANTIES.

                                                                                                                                                   [4mPYTHON[24m(1)
